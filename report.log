2023-07-21 20:38:48,488 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-07-21 20:39:56,438 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-07-21 20:39:57,895 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -15.520551678329637, best pos: [3.66021968 4.57625472 4.19895472 5.09760068 5.73585939 2.34558564
 4.79227023 4.6434806  3.26498265 4.77669851 4.3663201  5.21730024
 1.01049931 3.2306378  3.27734189 4.33797712 3.42956552 4.50142499
 4.91357871 5.4523855  1.9208748  2.46713938 1.24690275 4.07559456
 4.0911004  5.02061955 4.46697113 3.41702699 0.95310339 3.3382883
 2.43652295 3.02691825 4.32946523 4.30757177 4.7659484  5.76612048
 1.5270546  2.42683785 3.2031781  3.75524208 3.35600153 4.32816176
 3.31529419 0.72865191 2.3420116  2.29709493 4.86250443 1.27000602
 3.52368849 4.68241567 5.1897932  3.25368174 2.58839081 2.4014045
 4.04158031 4.97965854 3.65760983 4.62366502 4.8785428  4.06460625
 2.14172107 4.30366229 3.9072508  5.12287306]
2023-07-21 20:42:33,599 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-07-21 20:42:41,823 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-07-21 20:44:41,734 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-07-21 20:44:43,216 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -15.426052443351264, best pos: [2.52471962 4.67888587 3.64438654 2.0983532  3.90123668 2.83085981
 3.79291431 3.9409368  2.52044701 3.86181738 5.2025894  4.8570228
 4.61856052 2.22561439 3.62427581 3.64588542 4.8417703  4.73969284
 3.68951606 0.29211076 4.1676656  4.58515776 3.71450124 4.29991167
 4.07896194 4.46435076 1.03941785 0.43212473 3.19075193 3.27891985
 4.41487241 4.65327658 4.12144225 4.11168124 0.04131268 0.32477039
 1.49815895 2.96507491 2.51082655 4.73414538 3.76552686 5.20088253
 1.23018791 1.60319864 1.61693663 2.96476567 4.95750522 4.85800358
 3.89477176 5.26462223 4.25674193 2.30010613 3.09377572 3.09302172
 5.33919036 4.45520671 4.48907327 4.15737873 5.82847501 1.21170706
 3.2855852  3.51776317 4.2822004  5.71527761]
2023-07-21 20:46:49,535 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-07-21 20:46:51,019 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -15.025233131221938, best pos: [3.35983113 4.77787405 1.44567179 3.90033026 2.24493384 1.96360488
 5.6991114  2.06635783 5.31667115 1.07177169 0.92654783 3.0424104
 3.38236985 4.14621597 1.6009284  1.05712328 0.43734933 5.02901672
 1.92738731 2.59869473 3.51951339 4.74031808 6.12447698 2.38591587
 3.71013328 1.09928389 1.72353055 2.48961964 3.98195551 4.60269547
 5.32115034 2.76083772 0.28230462 1.63922547 2.14767575 2.22612911
 2.83338421 3.2030576  4.9742597  2.88560974 1.29907961 0.95381012
 1.92967734 1.99169815 2.74419187 4.92495173 4.21802174 3.48583477
 1.10989067 4.25624738 2.42418113 3.68128301 3.37420857 4.87227042
 3.38824011 2.42130243 3.81532467 1.89304494 2.54723814 3.42601344
 3.82215147 5.65920932 1.65469556 1.53240775]
2023-07-21 20:51:15,071 - pyswarms.single.global_best - INFO - Optimize for 2000 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-07-21 20:51:18,033 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -15.574587458023947, best pos: [1.65861958 3.24886355 2.8690795  4.34620067 3.84925524 0.28246656
 2.06493546 2.91529343 1.41355319 1.97190316 2.16143177 4.67228116
 4.20475899 0.94264085 2.43591537 1.5098464  0.65656674 2.72119313
 2.31655061 4.0102305  4.28868509 0.20381178 1.56670405 2.69174316
 1.4739633  1.36030057 3.71762756 4.53850674 4.86788511 1.81814182
 1.21027243 3.56205036 1.89190742 3.22410369 2.89815263 3.47574457
 2.42563998 0.94024895 3.17293868 3.19416029 1.97191386 3.52579327
 3.43385136 4.76909748 6.21987442 2.27585717 0.93879023 3.75971113
 2.4890564  3.15932784 4.24009104 2.66143612 3.53753361 1.62960245
 2.6646017  2.22749766 3.61348404 1.93516184 3.26423784 1.41285291
 0.38023545 1.79467504 2.30494744 3.42224343]
2023-07-21 20:55:16,374 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-07-21 20:55:22,274 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -15.577749806803755, best pos: [2.79216283 4.04083686 3.84953966 4.41244679 4.59465603 5.80554599
 1.64048206 5.08226814 2.76531752 2.22032247 2.39624302 2.75898757
 3.84039314 2.17733566 3.31897344 3.37981925 1.12046731 2.16388485
 3.88356323 3.32874068 5.35752397 0.55965003 2.56867889 4.05533472
 1.81788536 2.86357953 4.03021563 4.96489998 5.52590647 1.61397065
 2.11369442 2.81057188 2.18474137 2.29862042 3.99304443 4.79329343
 2.82196229 1.36266415 1.87136431 4.26075518 3.68226777 1.06983206
 4.61197486 4.72622595 0.64274196 1.77022635 3.74159476 3.68591459
 2.82090354 3.0953298  4.05106324 4.67072239 0.5573515  2.02721732
 2.54878084 2.94508881 2.36481013 3.55339634 2.878876   5.26781819
 6.16384115 2.53903298 3.14877018 4.92328917]
2023-07-21 20:58:56,775 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-07-21 20:59:02,586 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -15.665145067676166, best pos: [3.71812504 3.99276569 4.27381357 4.41469116 0.06815475 2.46226686
 2.37144524 2.90254838 2.08622136 4.48500808 4.8339166  4.57116525
 6.08774566 1.20048371 4.14358926 2.61163058 3.126955   3.73023217
 3.98081147 5.62753324 0.76365297 1.74217195 3.05239789 2.78606548
 2.7067967  4.69504007 4.21894875 5.79248727 1.42998926 2.80549678
 3.36625753 4.98240119 3.426084   3.72736199 5.31246868 4.14310835
 1.24260408 2.92982144 3.52062207 2.94881134 4.54809155 3.91073651
 4.61599581 1.15996357 0.75741561 4.8451511  3.4184129  4.44986355
 2.47360776 4.18010427 5.04559357 0.87938337 1.30996256 4.02110217
 2.39676737 5.34974733 3.62328165 4.16841441 5.0834654  4.61906416
 3.50684322 3.92202491 3.29510866 3.73177715]
2023-07-24 21:02:29,637 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-07-24 21:02:34,225 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -15.429793179143703, best pos: [4.23932647 4.42327561 4.34287898 4.769366   5.128261   1.21310967
 3.92614108 2.45981233 4.27342732 4.14218145 4.01966418 2.64256311
 0.5874714  2.64041275 3.15795121 4.41147707 3.19593549 4.04542089
 5.02161962 4.65792996 4.38536324 2.05062419 3.28993892 4.07892618
 3.14121403 2.92650588 4.95870957 6.19572046 1.07661355 3.44902265
 3.85941014 3.81783436 3.61163903 5.12044813 4.40040809 4.79160677
 1.66386089 4.17896359 3.6565984  4.48983234 4.54541251 5.54907868
 4.35035195 0.39527914 2.56569998 3.62652577 3.94601823 4.49233845
 3.52352467 3.64433335 3.86686497 2.69432062 2.65706455 3.34801243
 2.9301615  5.1959407  2.73091156 5.06057611 1.96063096 1.3560475
 3.7652107  2.90624473 4.12578163 3.85315039]
2023-07-24 21:05:39,412 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-07-24 21:05:43,880 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -15.43916249504266, best pos: [4.51655211 3.65883517 3.84543434 2.73603706 3.41769253 1.71491418
 2.86912595 4.28247729 3.55684865 3.85662763 2.82418616 4.61464917
 4.09354748 0.93453644 1.33719343 1.99525642 1.92656796 3.30505928
 3.86085847 4.33699858 5.59805221 1.25819363 2.53059419 2.88613452
 2.06185801 3.19389518 4.37452529 3.38640504 5.70118017 0.99015061
 3.56665054 3.22875247 2.84399894 2.72269623 2.96253581 5.59982246
 1.42855823 2.05789396 3.6075128  3.46700071 2.42830826 2.40309275
 4.86992545 5.58050677 0.55423257 2.80535333 1.92144153 2.51499279
 4.09588782 2.48171158 1.32352475 4.00416071 0.60830039 2.00565498
 2.7610404  3.80293393 1.57079273 3.76888706 4.63992276 1.52172726
 3.64012589 2.24385824 2.80339335 3.9456878 ]
2023-07-24 21:09:05,459 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-07-24 21:09:09,989 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -15.53283513749992, best pos: [4.11043557 3.63309642 2.95082017 4.46719146 4.8964564  4.14495936
 1.23567599 4.17396766 3.02682776 3.99040357 3.51581752 4.19549385
 4.7939978  0.70461472 2.93044318 2.359852   1.95348706 2.9953041
 3.88518775 2.85918857 0.31594986 0.78365793 3.35962555 2.70219871
 2.32511079 3.92811779 3.95353474 5.00452968 5.03849697 1.54716381
 2.5674107  2.92110139 3.46274285 2.79398694 4.73058012 4.76342521
 0.84924891 2.28023062 2.83709833 3.10259208 3.81244307 3.4462975
 3.41153356 4.26465439 3.78925324 2.85400888 3.36622664 3.41486947
 2.62034015 3.12117529 4.63982621 4.76368251 3.71123608 2.41684571
 1.84708431 3.49558828 2.41417358 3.96842606 4.27907018 5.52364483
 4.6227381  3.31776772 3.25845821 2.58983492]
2023-07-24 21:11:45,627 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-07-24 21:11:50,033 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -15.303102964843953, best pos: [2.76287558 3.23727788 3.08646776 4.02887654 2.45929351 1.5505643
 3.92588479 4.29615421 4.7837472  4.96722573 4.2172825  4.11678798
 1.85077515 1.70079449 3.71999273 2.04499338 2.45392536 3.10787024
 3.91406491 5.5664327  4.22768581 0.73940865 3.7664809  4.76142014
 3.13919168 4.26812465 4.8390284  4.2843458  4.68255898 2.21951766
 2.73321164 3.39533028 3.37672102 3.57066068 5.00999706 6.03916606
 2.53293968 2.23381915 3.62187463 2.542552   3.13316168 4.32663185
 5.30034073 5.23652883 1.89827486 3.20633126 3.15354182 3.51830097
 4.35396895 4.24539949 4.30121043 1.93445713 4.36192664 2.32316506
 2.4647923  4.13152486 4.86215127 4.16015738 5.48748698 0.8914121
 1.70812136 4.53112772 2.3088685  3.25017982]
2023-07-25 17:37:14,399 - matplotlib.animation - INFO - Animation.save using <class 'matplotlib.animation.FFMpegWriter'>
2023-07-25 17:37:14,400 - matplotlib.animation - INFO - MovieWriter._run: running command: ffmpeg -f rawvideo -vcodec rawvideo -s 640x480 -pix_fmt rgba -r 5.0 -loglevel error -i pipe: -vcodec h264 -pix_fmt yuv420p -y 8_20/data_rate_vs_iteration.mp4
2023-07-25 17:38:24,168 - matplotlib.animation - INFO - Animation.save using <class 'matplotlib.animation.FFMpegWriter'>
2023-07-25 17:38:24,169 - matplotlib.animation - INFO - MovieWriter._run: running command: ffmpeg -f rawvideo -vcodec rawvideo -s 640x480 -pix_fmt rgba -r 5.0 -loglevel error -i pipe: -vcodec h264 -pix_fmt yuv420p -y 8_20/phase_shifts.mp4
